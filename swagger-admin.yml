openapi: 3.0.3
info:
  title: Local Art & Culture (Kelompok 7)
  description: Dokumentasi ini menyediakan panduan lengkap untuk mengakses dan menggunakan API
  version: 1.0.0
  contact:
    email: uplabs.in@gmail.com
    name: Learn21
tags:
  - name: Products
    description: Operations related to Products
  - name: Event
    description: Operations related to Event
  - name: Article
    description: Operations related to Article
  - name: Admin
    description: Operations related to Admin

paths:
  /product:
    get:
      tags:
        - Products
      operationId: get-fetch-all-products
      summary: Get all products
      description: Show all product.
      parameters:
        - in: header
          name: BearerAuth
          schema:
            type: string
          required: true
          description: Input User Token
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Number of items per page.
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number for pagination.
        - in: query
          name: search
          schema:
            type: string
          required: false
          description: Search keyword for products
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/ProductModel"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Bad Request"
                  data:
                    type: string
                    example: null

  /product/transaction:
    post:
      tags:
        - Products
      operationId: transactions product
      summary: Transactions product
      description: Transactions product
      parameters:
        - in: header
          name: id
          schema:
            type: string
          required: true
          description: Input User Token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                total_price:
                  type: integer
                total_amount:
                  type: integer
                transaction_method_id:
                  type: integer

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/ProductTransactionsModel"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Bad Request"
                  data:
                    type: string
                    example: null



  /product/transaction/items:
    post:
      tags:
        - Products
      operationId: transactions product items
      summary: Transactions product items
      description: Transactions product items
      parameters:
        - in: header
          name: id
          schema:
            type: string
          required: true
          description: Input User Token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product_transaction_id:
                  type: integer
                product_id:
                  type: integer
                quantity:
                  type: integer
                price:
                  type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/ProductTransactionsItemModel"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Bad Request"
                  data:
                    type: string
                    example: null

  /product/category/{Id}:
    get:
      tags:
        - Products
      operationId: getFetchCategoriesDetail
      summary: Get categories details
      description: Retrieves details of a specific category along with related courses.
      parameters:
        - in: path
          name: Id
          schema:
            type: integer
          required: true
          description: Category ID
        - in: header
          name: id
          schema:
            type: string
          required: true
          description: Input User Token
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      categories:
                        $ref: "#/components/schemas/ProductCategoriesModel"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Bad Request"
                  categories:
                    type: string
                    example: null

  /product/reviews/{id}:
    get:
      tags:
        - Products
      operationId: get-fetch-product-reviews
      summary: Get product review
      description: Retrieves details of a specific categories along with related courses.
      parameters:
        - in: header
          name: id
          schema:
            type: string
          required: true
          description: Input User Token
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the review to retrieve.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/ProductReviewModel"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Bad Request"
                  categories:
                    type: string
                    example: null

  /events:
    get:
      tags:
        - Event
      operationId: get-fetch-all-event
      summary: Get all event
      description: Show all event.
      parameters:
        - in: header
          name: id
          schema:
            type: string
          required: true
          description: Input User Token
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Number of items per page.
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number for pagination.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/EventModel"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Bad Request"
                  data:
                    type: string
                    example: null

  /events/{id}:
    get:
      tags:
        - Event
      operationId: get-fetch-event
      summary: Get id event
      description: Show all event.
      parameters:
        - in: header
          name: id
          schema:
            type: string
          required: true
          description: Input User Token
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Number of items per page.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/EventModel"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Bad Request"
                  data:
                    type: string
                    example: null

  /events/transaction:
    post:
      tags:
        - Event
      operationId: transaction event
      summary: transaction event
      description: transaction event.
      parameters:
        - in: header
          name: id
          schema:
            type: string
          required: true
          description: Input User Token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                event_id:
                  type: integer
                  example: 1
                transaction_date:
                  type: integer
                  example: 2022-01-01
                total_amount:
                  type: integer
                  example: 10000
                ticket_quantity:
                  type: integer
                  example: 1
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/EventTransactionsModel"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Bad Request"
                  data:
                    type: string
                    example: null

  /article:
    get:
      tags:
        - Article
      operationId: get-fetch-all-article
      summary: Get all article
      description: Show all article.
      parameters:
        - in: header
          name: id
          schema:
            type: string
          required: true
          description: Input User Token
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Number of items per page.
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number for pagination.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/ArticleModel"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Bad Request"
                  data:
                    type: string
                    example: null

  /article/{id}:
    get:
      tags:
        - Article
      operationId: get-fetch-article
      summary: Get all article
      description: Show all article.
      parameters:
        - in: header
          name: id
          schema:
            type: string
          required: true
          description: Input User Token
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Number of items per page.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/ArticleModel"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Bad Request"
                  data:
                    type: string
                    example: null

  /admin/login:
    post:
      tags:
        - Admin
      operationId: Admin Login
      summary: Admin Login
      description: Admin enter email and password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Successfull
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data: 
                        $ref: "#/components/schemas/AdminModel"
                      

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Bad Request"
                  data:
                    type: string
                    example: null

  /admin/product:
    post:
      tags:
        - Admin
      operationId: Admin Create Product
      summary: Admin Create Product
      description: Admin Create Product
      parameters:
        - in: header
          name: id
          schema:
            type: string
          required: true
          description: Input Admin Token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: integer
                stock:
                  type: integer
                category_id:
                  type: integer
      responses:
        "200":
          description: Successfull
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/ProductModel"

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Bad Input"
                  data:
                    type: string
                    example: null

  /admin/product/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Product ID

    put:
      tags:
        - Admin
      operationId: adminUpdateProduct
      summary: Admin Update Product
      description: Admin Update Product
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductModel"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"

    delete:
      tags:
        - Admin
      operationId: adminDeleteProduct
      summary: Admin Delete Product
      description: Admin Delete Product
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"

  /admin/event:
    post:
      tags:
        - Admin
      operationId: Admin Create Event
      summary: Admin Create Event
      description: Admin Create Event
      parameters:
        - in: header
          name: id
          schema:
            type: string
          required: true
          description: Input Admin Token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                start_date:
                  type: string
                end_date:
                  type: string
                location:
                  type: string
                organizer:
                  type: string

      responses:
        "200":
          description: Successfull
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/EventModel"

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Bad Input"

  /admin/event/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Event ID

    put:
      tags:
        - Admin
      operationId: adminUpdateEvent
      summary: Admin Update Event
      description: Admin Update Event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                start_date:
                  type: string
                  format: date-time
                end_date:
                  type: string
                  format: date-time
                location:
                  type: string
                organizer:
                  type: string
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/EventModel"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Bad Input"

    delete:
      tags:
        - Admin
      operationId: adminDeleteEvent
      summary: Admin Delete Event
      description: Admin Delete Event
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Bad Input"

  /admin/article:
    post:
      tags:
        - Admin
      operationId: Admin Create Article
      summary: Admin Create Article
      description: Admin Create Article
      parameters:
        - in: header
          name: id
          schema:
            type: string
          required: true
          description: Input User Token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                content:
                  type: string

      responses:
        "200":
          description: Successfull
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/ArticleModel"

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Bad Input"

  /admin/article/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Article ID

    put:
      tags:
        - Admin
      operationId: adminUpdateArticle
      summary: Admin Update Article
      description: Admin Update Article
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Article ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArticleModel"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"

    delete:
      tags:
        - Admin
      operationId: adminDeleteArticle
      summary: Admin Delete Article
      description: Admin Delete Article
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Optional, used to specify the format of the token
    
  schemas:
    BasicResponse:
      title: BasicResponse
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: "success"
        data: {}

    Users:
      title: user
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        phone_no:
          type: integer
        gender:
          type: string
        date_of_birth:
          type: integer
        created_at:
          type: integer
    UserAddressModel:
      title: UserAddress
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        address_line:
          type: string
        postal_code:
          type: integer
        city:
          type: string
        state_province:
          type: string
        country:
          type: string
    ProductModel:
      title: Products
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: integer
        stock:
          type: integer
        likes_count:
          type: integer
        category_id:
          type: integer
        image:
          $ref: "#/components/schemas/ImageProductModel"
        video:
          type: string
        author_id:
          type: integer
    ProductCategoriesModel:
      title: ProductCategories
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        product:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              description:
                type: string
              price:
                type: integer
              stock:
                type: integer
              likes_count:
                type: integer
              author_id:
                type: integer
    ProductReviewModel:
      title: ProductReviews
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        product_id:
          type: integer
        rating:
          type: integer
        review_text:
          type: string
        review_date:
          type: integer

    # TransactionProductModel:
    #   title: TransactionProduct
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #     user_id:
    #       type: integer
    #     transaction_date:
    #       type: integer
    #     total_amount:
    #       type: integer
    #     transaction_method_id
    #       type: integer

    EventModel:
      title: Event
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        location:
          $ref: "#/components/schemas/Location"
        date:
          $ref: "#/components/schemas/Date"
        organizer:
          $ref: "#/components/schemas/Organizer"
        authorId:
          type: integer

    Location:
      type: object
      properties:
        id:
          type: integer
        address_line:
          type: string
        city:
          type: string
        state_province:
          type: string
        country:
          type: string

    Date:
      type: object
      properties:
        id:
          type: integer
        date_start:
          type: string
        date_end:
          type: string
        event_time:
          type: string
        gates_open:
          type: string

    Organizer:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    ArticleModel:
      title: Article
      type: object
      properties:
        id:
          type: integer
        authorId:
          type: integer
        title:
          type: string
        body:
          type: string
        likes_count:
          type: string
        date_published:
          type: integer

    ProductTransactionsModel:
      title: ProductTransaction
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        transaction_date:
          type: integer
        total_amount:
          type: integer
        transaction_method_id:
          type: integer

    ProductTransactionsItemModel:
      title: ProductTransactionItem
      type: object
      properties:
        id:
          type: integer
        product_transaction_id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        price:
          type: integer

    # TransactionMethodsModel:
    #   title: TransactionMethod
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #     name:
    #       type: string

    EventTransactionsModel:
      title: EventTransactions
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        event_id:
          $ref: "#/components/schemas/EventModel"
        transaction_date:
          type: integer
        ticket_quantity:
          type: integer
        total_amount:
          type: integer

    # EventTransactionHistoryModel:
    #   title: EventTransactionHistory
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #     user_id:
    #       type: integer
    #     event_transaction_id:
    #       $ref: "#/components/schemas/EventTransactionsModel"
          
    AdminModel:
      title: Admin
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        Token:
          type: string
    ImageProductModel:
      title: Image
      type: object
      properties:
        id:
          type: integer
        product_id:
          type: integer
        url:
          type: string

security:
  - BearerAuth: []

